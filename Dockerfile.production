FROM node:18-alpine AS builder

# Install dependencies needed for building
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY backend/package*.json ./backend/
COPY frontend/package*.json ./frontend/

# Install dependencies (skip git hooks in production)
ENV HUSKY=0
RUN npm ci --ignore-scripts

# Install backend dependencies
WORKDIR /app/backend
ENV HUSKY=0
RUN npm ci --ignore-scripts

# Install frontend dependencies  
WORKDIR /app/frontend
ENV HUSKY=0
RUN npm ci --ignore-scripts

# Copy source code
WORKDIR /app
COPY . .

# Generate Prisma client
WORKDIR /app/backend
RUN npx prisma generate

# Build backend
RUN npm run build

# Build frontend
WORKDIR /app/frontend
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create app user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S trello -u 1001

WORKDIR /app

# Copy package files
COPY --from=builder /app/backend/package*.json ./
COPY --from=builder /app/backend/node_modules ./node_modules

# Copy built backend
COPY --from=builder /app/backend/dist ./dist
COPY --from=builder /app/backend/prisma ./prisma

# Copy built frontend (for serving static files)
COPY --from=builder /app/frontend/build ./public

# Change ownership
RUN chown -R trello:nodejs /app
USER trello

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/server.js"]