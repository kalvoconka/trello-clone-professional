version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: trello_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-trello}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-trello123}
      POSTGRES_DB: ${DB_NAME:-trello_clone}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - trello_network

  redis:
    image: redis:7-alpine
    container_name: trello_redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - trello_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trello_backend
    restart: unless-stopped
    ports:
      - '5000:5000'
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${DB_USER:-trello}:${DB_PASSWORD:-trello123}@postgres:5432/${DB_NAME:-trello_clone}?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - trello_network
    command: npm run dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: trello_frontend
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      REACT_APP_API_URL: http://localhost:5000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - trello_network
    command: npm start

volumes:
  postgres_data:
  redis_data:

networks:
  trello_network:
    driver: bridge