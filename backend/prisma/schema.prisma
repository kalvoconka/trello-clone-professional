generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String   @unique
  password     String
  name         String
  avatar       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  ownedBoards  Board[]       @relation("BoardOwner")
  boardMembers BoardMember[]
  cards        Card[]        @relation("CardAssignees")
  comments     Comment[]
  activities   Activity[]
}

model Board {
  id          String   @id @default(cuid())
  name        String
  description String?
  background  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  ownerId     String
  owner       User         @relation("BoardOwner", fields: [ownerId], references: [id])
  
  lists       List[]
  members     BoardMember[]
  activities  Activity[]
  labels      Label[]
}

model BoardMember {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  
  boardId   String
  board     Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  
  @@unique([userId, boardId])
}

model List {
  id        String   @id @default(cuid())
  name      String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  
  cards     Card[]
}

model Card {
  id          String    @id @default(cuid())
  title       String
  description String?
  position    Int
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  archived    Boolean   @default(false)
  
  listId      String
  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  
  assignees   User[]    @relation("CardAssignees")
  labels      Label[]
  comments    Comment[]
  checklists  Checklist[]
  attachments Attachment[]
}

model Label {
  id      String @id @default(cuid())
  name    String
  color   String
  
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  
  cards   Card[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model Checklist {
  id        String   @id @default(cuid())
  name      String
  position  Int
  createdAt DateTime @default(now())
  
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  
  items     ChecklistItem[]
}

model ChecklistItem {
  id         String   @id @default(cuid())
  content    String
  completed  Boolean  @default(false)
  position   Int
  createdAt  DateTime @default(now())
  
  checklistId String
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  url       String
  size      Int
  mimeType  String
  createdAt DateTime @default(now())
  
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model Activity {
  id        String   @id @default(cuid())
  type      String
  data      Json
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
}